<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- tailwind  -->
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/minimalScrollBar.css">
    <!-- Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Itim&display=swap" rel="stylesheet">

    <!-- sweet alert -->
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <!-- flowbit -->
    <!-- <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.3/flowbite.min.css" rel="stylesheet" /> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.3/flowbite.min.js"></script>


    <title>Scraping Projects</title>
    
    <style>
        body {
            font-family: 'Itim', cursive;
        }
    </style>
</head>
 
<body class="overflow-x-hidden">
    <div class="w-screen bg-gray-900 snap-x flex py-5 px-5 gap-5 overflow-x-auto justify-center">
        <!--  -->
        <a href="#" class="w-96 h-24 scroll-ml-6 flex-shrink-0 snap-start rounded-lg bg-gray-50 transition transform hover:-translate-y-1 cursor-pointer duration-300">
            <div class="w-full h-full flex">
                <div class="pl-3 w-28 h-ful rounded-lg flex justify-center items-center">
                    <img src="logo/steam_logo.png" class="object-fit" alt="">
                </div>
                <div class="w-full h-ful rounded-lg">
                    <p class="w-full h-full text-3xl font-bold flex justify-center items-center">
                        Steam Review
                    </p>
                </div>
            </div>
        </a>
    </div>

    <div class="w-full flex flex-col justify-start p-2">
        <div class="w-full flex flex-row justify-start items-center gap-2">            
            <div class="w-full">
                <input id="steamUrl" type="text" class="w-full f-input min-w-[300px]" 
                    placeholder="Enter Steam Review URL : https://steamcommunity.com/app/730/reviews/?filterLanguage=all&p=1&browsefilter=mostrecent"
                    value=""
                >
            </div>
            <div class=""> 
                <input id="limit" data-tooltip-target="tooltip-limit"  data-tooltip-placement="top"
                        type="number" class="w-full f-input min-w-[80px]" placeholder="Limit" step="10" value="20" min="0" max="1000" >
                <div id="tooltip-limit" role="tooltip" 
                    class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium 
                            text-white transition-opacity duration-300 bg-gray-900 rounded-lg 
                            shadow-sm opacity-0 tooltip border-2 border-white">
                    Limit
                    <div class="tooltip-arrow" data-popper-arrow></div>
                </div>
            </div>
            <div class="w-max">
                <div class="f-btn-primary" onclick="sendUrl()">
                    Start
                </div>
            </div>
            <div class="w-max">
                <div class="f-btn-success" onclick="exportCsv()">
                    Export .csv
                </div>
            </div>
            <a class="w-max" href="https://steamcommunity.com/app/349040/reviews/?filterLanguage=thai&p=1&browsefilter=trendmonth" target="_blank">
                <div
                    class="f-btn bg-yellow-500 hover:bg-yellow-700">
                    Example Link
                </div>
            </a>
            <!-- <div class="w-max">
                <div class="f-btn-success">
                    Simulator
                </div>
            </div> -->
        </div>

        <div class="w-full">
            <table class="w-full mt-4 table-fixed ">
                <thead class="text-lg rounded-3xl border-2 rounded-tr-lg rounded-tl-lg">
                    <tr class="py-3">
                        <th class="indexField">#</th>
                        <th class="imageField"></th>
                        <th class="nameField">Username</th>
                        <th class="text-left px-2 ">Review</th>
                        <th class="voteField">Vote</th>
                        <th class="dateField">Date</th>
                    </tr>
                </thead>
                <tbody id="tbodyLoop" class="border-2">
                </tbody>
            </table>
        </div>
    </div>
</body>

<script>
    
    let isloading = false 
    let openChromium = false 
    let reviewData = [] 
    let items = 0
    let interval 

    async function sendUrl(){
        let url = document.getElementById('steamUrl')
        let limit = document.getElementById('limit')
        if(!(url.value.startsWith('https://steamcommunity.com/app/') && url.value.includes('/reviews/'))){
            // error url message 
            swal.fire({
                title: 'Invalid URL' ,
                text: 'URL shold start at "https://steamcommunity.com/app/" and Include "/reviews/" ',
                icon:'error',
                showConfirmButton: false ,
                timer: 7000 ,
                timerProgressBar:true ,
            })
 
        }else{
            Swal.fire({
                title: `Scraping ...`,
                html: `It may take a long time if you don't set the desired limit or it may not finish at all...`,
                allowOutsideClick: false ,
                showConfirmButton: false ,
                didOpen: () => {
                    Swal.showLoading()
                    // socket.onmessage = function(event) {
                    //     console.log("Received data:", event.data);
                    //     Swal.update({
                    //         title: `Scraping ${event.data} reviews`,
                    //     })
                    //     Swal.showLoading()
                    // };

                },
            })

            await fetch("http://127.0.0.1:4020/api/startScrapingSteamReview", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(
                        {
                            url: url.value ,
                            limit : limit.value
                        }
                    )
            }).then(async (res)=>{
                swal.close()
                items = 0 
                clearInterval(interval)
                const data = await res.json()
                reviewData = data

                // Success Toast 
                Swal.mixin({
                    toast: true ,
                    position: 'bottom-end',
                    timer: 5000 ,
                    timerProgressBar: true ,
                    showCancelButton: false ,
                    showConfirmButton: false ,
                    background : '#22c55e' ,
                    showCloseButton: true,
                    iconColor: 'white',
                    color:'white',
                    width: 'auto',
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                }).fire({
                    title: 'Success !!!' ,
                    text: `Total reviews ${data.length} `,
                    icon: 'success' ,
                })

                const tbody = document.querySelector("#tbodyLoop");
        
                //e.firstElementChild can be used. 
                let child = tbody.lastElementChild;  
                while (child) { 
                    tbody.removeChild(child); 
                    child = tbody.lastElementChild; 
                } 

                for (let i = 0; i < data.length; i++) {
                    // row
                    let row = document.createElement("tr");
                    row.classList.add('rowHover')
                    row.id = "rowData" + i;

                        // index 
                        let indexField = document.createElement('td');
                        indexField.textContent = i+1;
                        indexField.classList.add('indexField')
                        row.appendChild(indexField);
                        // imageField
                        let imageField = document.createElement('td');
                            let imageBox = document.createElement('img')
                            imageBox.classList.add('imageBox')
                            imageBox.src = data[i].avartar;
                        imageField.classList.add('imageField')
                        imageField.appendChild(imageBox)
                        row.appendChild(imageField);
                        // nameField 
                        let nameField = document.createElement('td')
                        nameField.textContent = data[i].username 
                        nameField.classList.add('nameField')
                        row.appendChild(nameField);
                        // reviewField
                        let reviewsTextField = document.createElement('td')
                        reviewsTextField.textContent = data[i].review
                        reviewsTextField.classList.add('px-2')
                        // reviewsTextField.classList.add('overflow-x-hidden')
                        // reviewsTextField.classList.add('w-96')
                        // reviewsTextField.classList.add('line-clamp-3')
                        row.appendChild(reviewsTextField);
                        //voteField
                        let voteField = document.createElement('td')
                        if(data[i].vote === '+'){
                            voteField.textContent = "Positive"
                            voteField.classList.add('text-green-500')
                        }else{
                            voteField.textContent = "Nagative"
                            voteField.classList.add('text-red-500')
                        }
                        voteField.classList.add('font-bold')
                        voteField.classList.add('voteField')
                        row.appendChild(voteField)
                        // dateField
                        let dateField = document.createElement('td')
                        dateField.textContent = data[i].date
                        dateField.classList.add('dateField')
                        row.appendChild(dateField) 

                    tbody.appendChild(row);
                }
            })
            console.log('true');

        }
    }

    async function exportCsv(){
        if(reviewData.length <= 0){
            swal.fire({
                title: 'No data !!',
                text: 'You shold scraping review first and then you will can export csv .',
                icon: 'warning',
                showConfirmButton: false ,
                timer: 7000 ,
                timerProgressBar:true 
            })
        }else{
            await fetch("http://127.0.0.1:4020/api/exportSteamReviewToCSV", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(
                        {
                            data: reviewData
                        }
                    )
            }).then(async(res)=>{
                const blob = await res.blob();
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'data.csv';
                link.click();
            })
        }
    }
</script>
</html>